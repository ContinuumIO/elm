readers: {
  hdf4-eos: {
     load_array: "elm.readers.hdf4:load_hdf4_array",
     load_meta: "elm.readers.hdf4:load_hdf4_meta"
  },
  dir_of_tifs_reader: {
     load_array: "elm.readers.tif:load_dir_of_tifs_array",
     load_meta: "elm.readers.tif:load_dir_of_tifs_meta"
   },
}

data_sources: {
 NPP_DSRF1KD_L2GD: {
  reader: hdf4-eos,
  file_pattern: "*.hdf",
  sample_from_args_func: "elm.sample_util.samplers:image_selection",
  band_specs: [[long_name, "Band 1 ", band_1],
  [long_name, "Band 2 ", band_2],
  [long_name, "Band 3 ", band_3],
  [long_name, "Band 4 ", band_4],
  [long_name, "Band 5 ", band_5],
  [long_name, "Band 7 ", band_7],
  [long_name, "Band 8 ", band_8],
  [long_name, "Band 10 ", band_10],
  [long_name, "Band 11 ", band_11]],
  sample_args_generator: iter_files_recursively,
  sample_args_generator_kwargs: {
    top_dir: "env:ELM_EXAMPLE_DATA_PATH",
    extension: ".hdf"
  },
  selection_kwargs: {
    data_filter: Null,
    metadata_filter: Null,
    filename_filter: Null,
    geo_filters: {
      include_polys: [],
      exclude_polys: [],
    },
   },
 },
 S3_LANDSAT_L2_TIFS: {
  sample_args_generator: tif_file_gen,
  sample_args_generator_kwargs: {
    top_dir: "env:ELM_EXAMPLE_DATA_PATH"
  },
  selection_kwargs: {},
  reader: dir_of_tifs_reader,
  sample_from_args_func: "elm.sample_util.samplers:image_selection",
  band_specs: [[name, "_B1.TIF", band_1],
  [name, "_B2.TIF", band_2],
  [name, "_B3.TIF", band_3],
  [name, "_B4.TIF", band_4],
  [name, "_B5.TIF", band_5],
  [name, "_B6.TIF", band_6],
  [name, "_B7.TIF", band_7],
  #[name, "_B8.TIF", band_8], # band 8 in panchromatic and at 15 m rather than 30 m
  [name, "_B9.TIF", band_9],
  [name, "_B10.TIF", band_10],
  [name, "_B11.TIF", band_11]]
 }
}
sample_args_generators: {
  tif_file_gen: "elm.readers.local_file_iterators:iter_dirs_of_dirs",
  iter_files_recursively: "elm.readers.local_file_iterators:iter_files_recursively",
}

polys: {

}
resamplers: {

}
aggregations: {

}
masks: {

}
add_features: {
  # an example of an entry here: NPP_DSRF1KD_L2GD_NDVI: "elm.preproc.add_features:ndvi",
}
feature_selection: {
  select_all: {
    selection: all,
    scoring: chi2,
    scoring_kwargs: {},
    kwargs: {},
    choices: all,
  }
}
model_scoring: {
  accuracy_score_cv: {
    scoring: "accuracy_score",
    scoring_agg: "numpy:median",
    greater_is_better: True,
    needs_proba: False,
    needs_threshold: False,
  },
  ensemble_kmeans_scoring: {
    scoring: "elm.model_selection.kmeans:ensemble_kmeans_scoring",
  }
}

train: {
  kmeans: {
    model_init_class: "sklearn.cluster:MiniBatchKMeans",
    # TODO Deprecate code dealing with: "post_fit_func":
    fit_kwargs: {},
    model_init_kwargs: {
      compute_labels: True
    },
    get_y_func: Null,
    get_y_kwargs: {},
    get_weight_func: Null,
    get_weight_kwargs: {},
    output_tag: kmeans,
    data_source: NPP_DSRF1KD_L2GD,
    keep_columns: [],
    feature_selection: select_all,
    ensemble_kwargs: {
      init_ensemble_size: 1,  # how many models to initialize at start
      saved_ensemble_size: 1, # how many models to serialize as "best"
      n_generations: 1,       # how many model train/select generations
      batches_per_gen: 1,     # how many partial_fit calls per train/select generation
    },
    model_selection_func: "elm.model_selection.kmeans:kmeans_model_averaging",
    model_selection_kwargs: {
      drop_n: 0,
      init_n: 0,
      evolve_n: 1,
    },
    model_scoring: ensemble_kmeans_scoring,
  }
}

predict: {
  kmeans: {
    data_source: NPP_DSRF1KD_L2GD,
    sample_args_generator: iter_files_recursively,
    sample_args_generator_kwargs: {
      top_dir: 'env:ELM_EXAMPLE_DATA_PATH',
      extension: '.hdf'
    }
  }
}
change_detection: {
  time_series: []
}
pipeline:
  - {train: kmeans,
     sample_pipeline: [
      {feature_selection: select_all},
    ]}
  - {predict: kmeans,
     sample_pipeline: [
      {feature_selection: select_all},
      ]
    }


# Config options that can be overriden by environment variables:
DASK_THREADS: Null # os.cpu_count() if not given
DASK_PROCESSES: Null  # os.cpu_count() if not given
DASK_EXECUTOR: SERIAL
DASK_SCHEDULER: Null
LADSWEB_LOCAL_CACHE: Null
