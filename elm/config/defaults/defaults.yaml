readers: {
  hdf4-eos: {
     load_array: "elm.readers.hdf4:load_hdf4_array",
     load_meta: "elm.readers.hdf4:load_hdf4_meta"
  },
  dir_of_tifs_reader: {
     load_array: "elm.readers.tif:load_dir_of_tifs_array",
     load_meta: "elm.readers.tif:load_dir_of_tifs_meta"
   },
}

downloads: {
 default_downloader: "elm.acquire.ladsweb_ftp:main"
}

data_sources: {
 NPP_DSRF1KD_L2GD: {
  product_number: 3001,
  product_name: NPP_DSRF1KD_L2GD,
  reader: hdf4-eos,
  file_pattern: "*.hdf",
  years: [2015],
  data_days: all,
  download: default_downloader,
  band_specs: [[long_name, "Band 1 ", band_1],
  [long_name, "Band 2 ", band_2],
  [long_name, "Band 3 ", band_3],
  [long_name, "Band 4 ", band_4],
  [long_name, "Band 5 ", band_5],
  [long_name, "Band 7 ", band_7],
  [long_name, "Band 8 ", band_8],
  [long_name, "Band 10 ", band_10],
  [long_name, "Band 11 ", band_11]]
  },
 S3_LANDSAT_L2_TIFS: {
  reader: dir_of_tifs_reader,
  band_specs: [[name, "_B1.TIF", band_1],
  [name, "_B2.TIF", band_2],
  [name, "_B3.TIF", band_3],
  [name, "_B4.TIF", band_4],
  [name, "_B5.TIF", band_5],
  [name, "_B6.TIF", band_6],
  [name, "_B7.TIF", band_7],
  #[name, "_B8.TIF", band_8], # band 8 in panchromatic and at 15 m rather than 30 m
  [name, "_B9.TIF", band_9],
  [name, "_B10.TIF", band_10],
  [name, "_B11.TIF", band_11]]
 }
}
file_generators: {
  default_file_gen: "elm.readers.local_file_iterators:get_all_filenames_for_product",
  tif_file_gen: "elm.readers.local_file_iterators:iter_dirs_of_dirs"
}
file_lists: {}
samplers: {
  NPP_DSRF1KD_L2GD: {
    n_rows_per_sample: Null,
    files_per_sample: 1,
    file_generator: default_file_gen,
    data_generator: Null,
    selection_kwargs: {
      data_filter: Null,
      metadata_filter: Null,
      filename_filter: Null,
      geo_filters: {
        include_polys: [],
        exclude_polys: [],
      },
    }
  },
  S3_LANDSAT_L2_TIFS: {
    n_rows_per_sample: Null,
    files_per_sample: 1,
    file_generator: tif_file_gen,
    file_generator_kwargs: {
      top_dir: S3_LANDSAT
    },
    selection_kwargs: {
  }
}
}
polys: {

}
resamplers: {

}
aggregations: {

}
masks: {

}
add_features: {
  # an example of an entry here: NPP_DSRF1KD_L2GD_NDVI: "elm.preproc.add_features:ndvi",
}
feature_selection: {
  select_all: {
    selection: all,
    score_func: chi2,
    score_func_kwargs: {},
    kwargs: {},
    choices: all,
  }
}
train: {
  kmeans: {
    model_selection_func: "elm.model_selection.kmeans:kmeans_model_averaging",
    model_init_class: "sklearn.cluster:MiniBatchKMeans",
    post_fit_func: "elm.model_selection.kmeans:kmeans_add_within_class_var",
    fit_func: partial_fit,
    fit_kwargs: {},
    model_init_kwargs: {
      compute_labels: True
    },
    model_selection_kwargs: {  # TODO this needs to be validated
      no_shuffle: 1,
    },
    ensemble_kwargs: {
      ensemble_size: 2,
      saved_ensemble_size: 1,
      n_generations: 2,
      batches_per_gen: 2
    },
    get_y_func: Null,
    get_y_kwargs: {},
    get_weight_func: Null,
    get_weight_kwargs: {},
    output_tag: kmeans,
    # include either "data_source" or "sampler", not both
    # if giving "sampler" here, it is expected that
    # the named sampler uses a "data_generator" without
    # reference to a data_source.  Using a data_generator
    # can be useful for testing with synthetic data.
    data_source: S3_LANDSAT_L2_TIFS,
    keep_columns: [],
    feature_selection: select_all
  }
}

predict: {
  kmeans: {
    from_output_tag: kmeans,
    file_generator: default_file_gen,
    poly_summarize: [],
  }
}
change_detection: {
  time_series: []
}
pipeline:
  - {train: kmeans,
     sample_pipeline: [
      {feature_selection: select_all},
    ]}
  - {predict: kmeans}


# Config options that can be overriden by environment variables:
DASK_THREADS: Null # os.cpu_count() if not given
DASK_PROCESSES: Null  # os.cpu_count() if not given
DASK_EXECUTOR: SERIAL
DASK_SCHEDULER: Null
LADSWEB_LOCAL_CACHE: Null