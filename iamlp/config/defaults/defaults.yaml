

readers: {
  hdf4-eos: {
     load: "iamlp.readers.hdf4_L2_tools:load_hdf4",
     bounds: "iamlp.readers.hdf4_L2_tools:get_subdataset_bounds"
   }
  }
downloads: {
 default_downloader: "iamlp.acquire.ladsweb_ftp:main"
}

data_sources: {
 NPP_DSRF1KD_L2GD: {
  product_number: 3001,
  product_name: NPP_DSRF1KD_L2GD,
  reader: hdf4-eos,
  file_pattern: "*.hdf",
  years: [2015],
  data_days: all,
  download: default_downloader,
  band_specs: [[long_name, "Band 1 ", band_1],
  [long_name, "Band 2 ", band_2],
  [long_name, "Band 3 ", band_3],
  [long_name, "Band 4 ", band_4],
  [long_name, "Band 5 ", band_5],
  [long_name, "Band 7 ", band_7],
  [long_name, "Band 8 ", band_8],
  [long_name, "Band 10 ", band_10],
  [long_name, "Band 11 ", band_11]]
  }
}
file_generators: {
  default_file_gen: "iamlp.readers.local_file_iterators:get_all_filenames_for_product",
}
file_lists: {}
samplers: {
  NPP_DSRF1KD_L2GD: {
    callable: "iamlp.samplers:random_images_selection",
    n_rows_per_sample: Null,
    files_per_sample: 1,
    file_generator: default_file_gen,
    selection_kwargs: {
      data_filter: Null,
      metadata_filter: Null,
      filename_filter: Null,
      geo_filters: {
        include_polys: [],
        exclude_polys: [],
      },
    }
  }
}
polys: {}
resamplers: {

}
aggregations: {

}
masks: {

}
add_features: {
  # an example of an entry here: NPP_DSRF1KD_L2GD_NDVI: "iamlp.preproc.add_features:ndvi",
}
feature_selector: {
  select_all: {
    selector: all,
    scorer: chi2,
    kwargs: {},
    choices: all,
  }
}
train: {
  kmeans: {
    fit_wrapper_func: "iamlp.pipeline.partial_fit:partial_fit",
    model_selector_func: "iamlp.model_selectors.kmeans:kmeans_model_averaging",
    model_init_func: "sklearn.cluster:MiniBatchKMeans",
    post_fit_func: "iamlp.model_selectors.kmeans:kmeans_add_within_class_var",
    fit_wrapper_kwargs: {
      n_batches: 2
    },
    fit_func: partial_fit,
    fit_kwargs: {},
    model_init_kwargs: {
      compute_labels: True
    },
    model_selector_kwargs: {  # TODO this needs to be validated
      no_shuffle: 1,
    },
    ensemble_kwargs: {
      ensemble_size: 2,
      saved_ensemble_size: 1,
      n_generations: 2,
    },
    sampler: NPP_DSRF1KD_L2GD,
    get_y_func: Null,
    get_y_kwargs: {},
    output_tag: kmeans,
    data_source: NPP_DSRF1KD_L2GD,
    context_columns: [],
    feature_selector: select_all
  }
}

predict: {
  kmeans: {
    from_output_tag: kmeans,
    file_generator: default_file_gen,
    poly_summarize: [],
  }
}
change_detection: {
  time_series: []
}
pipeline:
  - {download_data_sources: NPP_DSRF1KD_L2GD}
  - {train: kmeans,
     on_each_sample:
      - {feature_selector: select_all}
  - {predict: kmeans}


# Config options that can be overriden by environment variables:
DASK_THREADS: Null # os.cpu_count() if not given
DASK_PROCESSES: Null  # os.cpu_count() if not given
DASK_EXECUTOR: SERIAL
DASK_SCHEDULER: Null
LADSWEB_LOCAL_CACHE: Null